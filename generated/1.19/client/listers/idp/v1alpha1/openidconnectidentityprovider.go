// Copyright 2020 the Pinniped contributors. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "go.pinniped.dev/generated/1.19/apis/idp/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpenIDConnectIdentityProviderLister helps list OpenIDConnectIdentityProviders.
// All objects returned here must be treated as read-only.
type OpenIDConnectIdentityProviderLister interface {
	// List lists all OpenIDConnectIdentityProviders in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpenIDConnectIdentityProvider, err error)
	// OpenIDConnectIdentityProviders returns an object that can list and get OpenIDConnectIdentityProviders.
	OpenIDConnectIdentityProviders(namespace string) OpenIDConnectIdentityProviderNamespaceLister
	OpenIDConnectIdentityProviderListerExpansion
}

// openIDConnectIdentityProviderLister implements the OpenIDConnectIdentityProviderLister interface.
type openIDConnectIdentityProviderLister struct {
	indexer cache.Indexer
}

// NewOpenIDConnectIdentityProviderLister returns a new OpenIDConnectIdentityProviderLister.
func NewOpenIDConnectIdentityProviderLister(indexer cache.Indexer) OpenIDConnectIdentityProviderLister {
	return &openIDConnectIdentityProviderLister{indexer: indexer}
}

// List lists all OpenIDConnectIdentityProviders in the indexer.
func (s *openIDConnectIdentityProviderLister) List(selector labels.Selector) (ret []*v1alpha1.OpenIDConnectIdentityProvider, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenIDConnectIdentityProvider))
	})
	return ret, err
}

// OpenIDConnectIdentityProviders returns an object that can list and get OpenIDConnectIdentityProviders.
func (s *openIDConnectIdentityProviderLister) OpenIDConnectIdentityProviders(namespace string) OpenIDConnectIdentityProviderNamespaceLister {
	return openIDConnectIdentityProviderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OpenIDConnectIdentityProviderNamespaceLister helps list and get OpenIDConnectIdentityProviders.
// All objects returned here must be treated as read-only.
type OpenIDConnectIdentityProviderNamespaceLister interface {
	// List lists all OpenIDConnectIdentityProviders in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpenIDConnectIdentityProvider, err error)
	// Get retrieves the OpenIDConnectIdentityProvider from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OpenIDConnectIdentityProvider, error)
	OpenIDConnectIdentityProviderNamespaceListerExpansion
}

// openIDConnectIdentityProviderNamespaceLister implements the OpenIDConnectIdentityProviderNamespaceLister
// interface.
type openIDConnectIdentityProviderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OpenIDConnectIdentityProviders in the indexer for a given namespace.
func (s openIDConnectIdentityProviderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OpenIDConnectIdentityProvider, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenIDConnectIdentityProvider))
	})
	return ret, err
}

// Get retrieves the OpenIDConnectIdentityProvider from the indexer for a given namespace and name.
func (s openIDConnectIdentityProviderNamespaceLister) Get(name string) (*v1alpha1.OpenIDConnectIdentityProvider, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("openidconnectidentityprovider"), name)
	}
	return obj.(*v1alpha1.OpenIDConnectIdentityProvider), nil
}
