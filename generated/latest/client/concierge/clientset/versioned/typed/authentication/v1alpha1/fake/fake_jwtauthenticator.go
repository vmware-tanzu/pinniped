// Copyright 2020-2024 the Pinniped contributors. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "go.pinniped.dev/generated/latest/apis/concierge/authentication/v1alpha1"
	authenticationv1alpha1 "go.pinniped.dev/generated/latest/client/concierge/clientset/versioned/typed/authentication/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeJWTAuthenticators implements JWTAuthenticatorInterface
type fakeJWTAuthenticators struct {
	*gentype.FakeClientWithList[*v1alpha1.JWTAuthenticator, *v1alpha1.JWTAuthenticatorList]
	Fake *FakeAuthenticationV1alpha1
}

func newFakeJWTAuthenticators(fake *FakeAuthenticationV1alpha1) authenticationv1alpha1.JWTAuthenticatorInterface {
	return &fakeJWTAuthenticators{
		gentype.NewFakeClientWithList[*v1alpha1.JWTAuthenticator, *v1alpha1.JWTAuthenticatorList](
			fake.Fake,
			"",
			v1alpha1.SchemeGroupVersion.WithResource("jwtauthenticators"),
			v1alpha1.SchemeGroupVersion.WithKind("JWTAuthenticator"),
			func() *v1alpha1.JWTAuthenticator { return &v1alpha1.JWTAuthenticator{} },
			func() *v1alpha1.JWTAuthenticatorList { return &v1alpha1.JWTAuthenticatorList{} },
			func(dst, src *v1alpha1.JWTAuthenticatorList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.JWTAuthenticatorList) []*v1alpha1.JWTAuthenticator {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.JWTAuthenticatorList, items []*v1alpha1.JWTAuthenticator) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
