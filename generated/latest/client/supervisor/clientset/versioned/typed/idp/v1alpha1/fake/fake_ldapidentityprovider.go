// Copyright 2020-2024 the Pinniped contributors. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "go.pinniped.dev/generated/latest/apis/supervisor/idp/v1alpha1"
	idpv1alpha1 "go.pinniped.dev/generated/latest/client/supervisor/clientset/versioned/typed/idp/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeLDAPIdentityProviders implements LDAPIdentityProviderInterface
type fakeLDAPIdentityProviders struct {
	*gentype.FakeClientWithList[*v1alpha1.LDAPIdentityProvider, *v1alpha1.LDAPIdentityProviderList]
	Fake *FakeIDPV1alpha1
}

func newFakeLDAPIdentityProviders(fake *FakeIDPV1alpha1, namespace string) idpv1alpha1.LDAPIdentityProviderInterface {
	return &fakeLDAPIdentityProviders{
		gentype.NewFakeClientWithList[*v1alpha1.LDAPIdentityProvider, *v1alpha1.LDAPIdentityProviderList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("ldapidentityproviders"),
			v1alpha1.SchemeGroupVersion.WithKind("LDAPIdentityProvider"),
			func() *v1alpha1.LDAPIdentityProvider { return &v1alpha1.LDAPIdentityProvider{} },
			func() *v1alpha1.LDAPIdentityProviderList { return &v1alpha1.LDAPIdentityProviderList{} },
			func(dst, src *v1alpha1.LDAPIdentityProviderList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.LDAPIdentityProviderList) []*v1alpha1.LDAPIdentityProvider {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.LDAPIdentityProviderList, items []*v1alpha1.LDAPIdentityProvider) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
